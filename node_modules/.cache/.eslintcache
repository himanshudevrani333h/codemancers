[{"C:\\Users\\Himanshu\\Documents\\New folder\\codemances\\src\\index.js":"1","C:\\Users\\Himanshu\\Documents\\New folder\\codemances\\src\\App.js":"2","C:\\Users\\Himanshu\\Documents\\New folder\\codemances\\src\\PostPage.jsx":"3","C:\\Users\\Himanshu\\Documents\\New folder\\codemances\\src\\GifyModel.jsx":"4"},{"size":159,"mtime":1633547484233,"results":"5","hashOfConfig":"6"},{"size":126,"mtime":1633547515803,"results":"7","hashOfConfig":"6"},{"size":3690,"mtime":1633605819200,"results":"8","hashOfConfig":"6"},{"size":645,"mtime":1633601086510,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"15eyqi",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"C:\\Users\\Himanshu\\Documents\\New folder\\codemances\\src\\index.js",[],["20","21"],"C:\\Users\\Himanshu\\Documents\\New folder\\codemances\\src\\App.js",[],"C:\\Users\\Himanshu\\Documents\\New folder\\codemances\\src\\PostPage.jsx",["22","23","24"],"import { useEffect, useState } from \"react\";\r\nimport GifyModel from \"./GifyModel\";\r\nimport \"./style.css\";\r\n\r\nconst PostPage = () => {\r\n  let [data, setData] = useState();\r\n  let [isClicked, setClicked] = useState(false);\r\n  let [source, setSource] = useState(\"\");\r\n  useEffect(() => {\r\n    async function fn() {\r\n      let one = await fetch(\r\n        \"https://api.giphy.com/v1/gifs/search?q=funny+cat&api_key=dc6zaTOxFJmzC\"\r\n      );\r\n      let data = await one.json();\r\n      console.log(data.data);\r\n      let arr = [];\r\n      data.data.map((el)=>{\r\n        arr.push(el.images.original.url);\r\n      })\r\n      setData(arr);\r\n    }\r\n    fn();\r\n  }, []);\r\n\r\n  function getGIF(source) {\r\n    if (source) setSource(source);\r\n  }\r\n  async function getDta(data) {\r\n    console.log(data);\r\n    let searchTerm = data;\r\n    searchTerm = searchTerm.trim().replace(/ /g, \"+\"); // adds a + wherever a space is\r\n    console.log(\"data 23 \", searchTerm);\r\n    let one = await fetch(\r\n      `https://api.giphy.com/v1/gifs/search?q=${searchTerm}&api_key=dc6zaTOxFJmzC`\r\n    );\r\n    let data_ = await one.json();\r\n    if (data_) {\r\n      let arr = [];\r\n      data_.data.map((el)=>{\r\n        arr.push(el.images.original.url);\r\n      })\r\n      setData(arr);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"top_head\">\r\n        <div className=\"CP\">\r\n          <p>Compose Post</p>\r\n        </div>\r\n        <div className=\"PV\">\r\n          <p>photo/video</p>\r\n        </div>\r\n        <div className=\"LV\">\r\n          <p>Live Video</p>\r\n        </div>\r\n\r\n        <span>X</span>\r\n      </div>\r\n      <div className=\"wrapper\">\r\n        <div className=\"content\">\r\n          <span className=\"material-icons-outlined profile\">\r\n            {\" \"}\r\n            account_circle{\" \"}\r\n          </span>\r\n          <div\r\n            placeholder=\"Write something here...\"\r\n            spellCheck=\"false\"\r\n            className=\"post_area\"\r\n            required\r\n            contentEditable=\"true\"\r\n          >\r\n            {source != \"\" ? <img src={source} alt=\"loading..\" /> : null}\r\n          </div>\r\n          <div className=\"theme-emoji\">\r\n            <span className=\"material-icons-outlined emoj\"> mood </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"opt\">\r\n          <div className=\"list_1\">\r\n            <div className=\"tgs\">\r\n              <span className=\"material-icons-outlined loyalty\"> loyalty</span>\r\n              <p>tag friends</p>\r\n            </div>\r\n            <div\r\n              className=\"gif\"\r\n              onClick={() => {\r\n                !isClicked ? setClicked(true) : setClicked(false);\r\n              }}\r\n            >\r\n              <span className=\"material-icons-outlined gif_box\">gif_box</span>\r\n              <p>GIF</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"list_2\">\r\n            <div className=\"loc\">\r\n              <span className=\"material-icons-outlined location\">\r\n                location_on\r\n              </span>\r\n              <p>check in</p>\r\n            </div>\r\n            <div className=\"event\">\r\n              <span className=\"material-icons-outlined event_note\">\r\n                event_note\r\n              </span>\r\n              <p>tag event</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"btns\">\r\n          <button className=\"btn_post_only\">\r\n            <span className=\"material-icons-outlined lock\"> lock </span>Only me\r\n          </button>\r\n          <button className=\"btn_post\">Post</button>\r\n        </div>\r\n      </div>\r\n      {isClicked ? <GifyModel data={data} fn={getDta} fn2={getGIF} /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n","C:\\Users\\Himanshu\\Documents\\New folder\\codemances\\src\\GifyModel.jsx",[],{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":17,"column":25,"nodeType":"31","messageId":"32","endLine":17,"endColumn":27},{"ruleId":"29","severity":1,"message":"30","line":39,"column":26,"nodeType":"31","messageId":"32","endLine":39,"endColumn":28},{"ruleId":"33","severity":1,"message":"34","line":74,"column":21,"nodeType":"35","messageId":"36","endLine":74,"endColumn":23},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]